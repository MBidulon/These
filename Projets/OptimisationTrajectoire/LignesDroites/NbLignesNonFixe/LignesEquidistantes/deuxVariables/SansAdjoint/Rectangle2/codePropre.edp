pathCodesUtiles="/Users/mathilde/These/Projets/OptimisationTrajectoire/CodesUtiles";

include pathCodesUtiles+"/gestionSolutions.edp"
include pathCodesUtiles+"/heaviside.edp"

verbosity=0;
int affichage =1; 

load "medit" //pour freefem

/* ------- PARAMETRES -------- */

/* Geometrie */	
int n=40;
real xM0=0.; real xM1=2.; real yM0=0.; real yM1=1.; 

/* autres */
real Vitesse=1.;

/* Physique */
real Tini=30; real Tphase=500; real Tsup=750;
real puissanceLaser=768000*10^4;
real rhoPoudre=450*4000; real rhoSolide=450*8000;		
real lambdaPoudre=0.25; real lambdaSolide=15.; 
real epCaracCoucheCarre=0.0001;

/* Gestion fonction objectif et contrainte */
int coefNorme=2;
real tolContrainte=700;

real Lag=0;
real LagStep=0.5;
real lphase=1.;
		

/* Optimisation */
int nbItB=30;
real tolDescente=100.;


/* Bornes pour les variables d'optim */
real DeltaLMin=0.15;
real DeltaLMax=1.;	
real stildeMin=1.1*(xM1-xM0);

/* Initialisation */
real DeltaL=0.2;		
real stilde=50;



/* ------------ AVANT BOUCLE ----------*/
/* Geometrie */	
	/* maillage + el finis + longueur d'une ligne (conséquence du maillage) */
			int[int] lab=[1,1,1,1];
			mesh Sh=square(n,n,[xM0+(xM1-xM0)*x, yM0+(yM1-yM0)*y],label=lab);
			fespace Vh1(Sh,P1); fespace Vh0(Sh,P0);
			Vh1 aux1; Vh0 aux0;	
			Vh0 meshSizes=hTriangle;		
			real meshsiz=meshSizes[].max; //maximal length of edges
			int np=Sh.nv; int nt=Sh.nt;
			real longueurX=xM1-xM0; real longueurY=yM1-yM0;					
			real epsilon=2*meshsiz;
			
/* Optimisation */
			int itB=1; int acc=1;
			
/* Liés à la résolution de la chaleur et aux itérations de calcul */
			real deltat=2*meshsiz*Vitesse;	
	
			int nbMaxLignes=int(longueurY/DeltaLMin)+2;
			int Nl=int(longueurX/((deltat*Vitesse)))+2;
			int NMit=Nl*nbMaxLignes;
	
			real stildeMax=(Nl-1)*nbMaxLignes*deltat*Vitesse;	

	
/* -------------------------------- VARIABLES DE CALCUL --------------------------------- */
real L, Lold, Jphase,Contrainte, Jphaseold, Contrainteold;
real ordonnee, abscisse;
Vh1 source, T, Ttilde, derTtildeDeltaL, derTtildeStilde;
Vh1 Ttildeold,derTtildeDeltaLold, derTtildeStildeold;
Vh1 rho, lambda, XSolide;

Vh1 auxNorme, Norme, Nmoins, auxDerPhaseDeltaL, auxDerPhaseStilde;
real derPhaseDeltaL, derPhaseStilde;

real derSupDeltaL, derSupStilde;
Vh1 auxDerSup;

real derDeltaL,derStilde, derDeltaLold, derStildeold;

real DeltaLold, stildeold;

real coefDeltaL=(DeltaLMax-DeltaLMin)/10.;
real coefStilde=(stildeMax-stildeMin)/10.;
real stepDeltaL, stepStilde;		
/* --------------------------- DEF DES PROBLEMES DE PHYSIQUE  --------------------------- */	 

/* Chaleur */
	
		
		
	macro resolutionChaleur(Ttilde,Ttildeold,source,aux1){
		problem chaleur(Ttilde,aux1)=
					int2d(Sh)(rho*Ttilde*aux1)
				   +int2d(Sh)(lambdaSolide/epCaracCoucheCarre*deltat*Ttilde*aux1)
				   +int2d(Sh)(lambda*deltat*(dx(Ttilde)*dx(aux1)+dy(Ttilde)*dy(aux1)))
				   -int2d(Sh)(deltat*source*aux1)
				   -int2d(Sh)(rho*Ttildeold*aux1)
				   +on(1,Ttilde=0);
		chaleur;
		Ttildeold=Ttilde;
	}//EOM	
			   		   		

				
						
				
		string svol;
		{svol = "valeurs.data";
			ofstream f(svol);
			f<<0<<" "<<acc<<" "<<L<<" "<<Jphase<<" "<<Contrainte<<" "<<DeltaL<<" "<<stilde<<" "<<Lag<<endl;}	
			
				 
		Lold=1000000000;

	for(itB=1; itB<nbItB; itB=itB+1){
			if(affichage==1){cout<<"itB="<<itB<<"; DeltaL="<<DeltaL<<"; stilde="<<stilde<<endl;}
				
		/* Debut de la boucle, remise à 0 des quantités */
				Jphase=0; Contrainte=0; L=0;
				auxNorme=0; Norme=0; Nmoins=0; auxDerPhaseDeltaL=0; auxDerPhaseStilde=0;
				derPhaseDeltaL=0; derPhaseStilde=0;
				derSupDeltaL=0; derSupStilde=0;
				derDeltaL=0; derStilde=0;


		/* SIMULATION DU PROCESSUS */
		
			/* t=0 */
				T=Tini; Ttilde=0; Ttildeold=0;
				derTtildeDeltaL=0; derTtildeStilde=0; derTtildeDeltaLold=0; derTtildeStildeold=0;
				XSolide=0;
				
				savesolution (0, Sh, Ttilde,"Ttilde",0);
				savesolution (0, Sh, XSolide,"XSolide",0);
				savesolution (0, Sh, derTtildeDeltaL,"derTtildeDeltaL",0);
				savesolution (0, Sh, derTtildeStilde,"derTtildeStilde",0);
				rho=rhoPoudre+(rhoSolide-rhoPoudre)*XSolide;
				lambda=lambdaPoudre+(lambdaSolide-lambdaPoudre)*XSolide;
				
				source=0;
				savesolution (0, Sh, source,"source",0);
				savesolution (0, Sh, source,"derSourceDeltaL",0);
				savesolution (0, Sh, source,"derSourceStilde",0);
				
				auxNorme=deltat*(abs(Ttilde+Tini))^(coefNorme);
				auxDerPhaseDeltaL=deltat*((abs(Ttilde+Tini))^(coefNorme-1))*derTtildeDeltaL;
				auxDerPhaseStilde=deltat*((abs(Ttilde+Tini))^(coefNorme-1))*derTtildeStilde;	
				
				auxDerSup=T+Tini-Tsup;
				auxDerSup=max(auxDerSup,0.);
				derSupDeltaL=deltat*int2d(Sh)(2*auxDerSup*derTtildeDeltaL);
				derSupStilde=deltat*int2d(Sh)(2*auxDerSup*derTtildeStilde);
				Contrainte=int2d(Sh)(deltat*auxDerSup*auxDerSup);
											
			/* fin t=0 */
				
			for(int it=1; it<=NMit; it=it+1){
					
					/* calcul de l'abscisse et de l'ordonnée liées à l'itération */	
					abscisse=xM0+Vitesse*deltat*(it-1-int((it-1)/Nl)*Nl);
					ordonnee=yM0+int((it-1)/Nl)*DeltaL;
					
					/* calcul de la source de chaleur et des températures liées */					
					source=puissanceLaser*exp(-100*((x-abscisse)^2+(y-ordonnee)^2))*heaviside(stilde-Vitesse*it*deltat,epsilon);
					resolutionChaleur(Ttilde,Ttildeold,source,aux1);
					savesolution (it, Sh, source,"source",0);
					T=Ttilde+Tini;
					XSolide=XSolide+(T>Tphase)*(XSolide<0.5);
					
					savesolution (it, Sh, Ttilde,"Ttilde",0);
					savesolution (it, Sh, XSolide,"Xsolide",0);
					
					plot(source,fill=1,value=1,WindowIndex=2);
					plot(Ttilde, fill=1, value=1, WindowIndex=3);				
					plot(XSolide, fill=1, value=1, WindowIndex=4);
					
					/* calcul de la derivée de la source et de la température par rapport à DeltaL */
					source=200*(y-ordonnee)*int((it-1)/Nl)*puissanceLaser*exp(-100*((x-abscisse)^2+(y-ordonnee)^2))*heaviside(stilde-Vitesse*it*deltat,epsilon);
					resolutionChaleur(derTtildeDeltaL,derTtildeDeltaLold,source,aux1);
					savesolution (it, Sh, source,"derSourceDeltaL",0);
					savesolution(it,Sh,derTtildeDeltaL,"derTtildeDeltaL",0);
					
					/* calcul de la derivée de la source et de la température par rapport à stilde */
					source=puissanceLaser*exp(-100*((x-abscisse)^2+(y-ordonnee)^2))*heavisideP(stilde-Vitesse*it*deltat,epsilon);
					resolutionChaleur(derTtildeStilde,derTtildeStildeold,source,aux1);
					savesolution (it, Sh, source,"derSourceStilde",0);					
					savesolution(it,Sh,derTtildeStilde,"derTtildeStilde",0);

					/* changement de phase brutal (on change les propriétés mécaniques au point) */														
					rho=rhoPoudre+(rhoSolide-rhoPoudre)*XSolide;
					lambda=lambdaPoudre+(lambdaSolide-lambdaPoudre)*XSolide;
					
					/* préparation pour le calcul de la norme et des dérivées pour la phase */
					auxNorme=auxNorme+deltat*(abs(Ttilde+Tini))^(coefNorme);
					auxDerPhaseDeltaL=auxDerPhaseDeltaL+deltat*((abs(Ttilde+Tini))^(coefNorme-1))*derTtildeDeltaL;
					auxDerPhaseStilde=auxDerPhaseStilde+deltat*((abs(Ttilde+Tini))^(coefNorme-1))*derTtildeStilde;	
					
					/* préparation pour le calcul de la Contrainte et des dérivées liées à la contrainte */					
					auxDerSup=T+Tini-Tsup;
					auxDerSup=max(auxDerSup,0.);
					derSupDeltaL=derSupDeltaL+deltat*int2d(Sh)(2*auxDerSup*derTtildeDeltaL);
					derSupStilde=derSupStilde+deltat*int2d(Sh)(2*auxDerSup*derTtildeStilde);
					Contrainte=Contrainte+deltat*int2d(Sh)(auxDerSup*auxDerSup);
					
					/* préparation pour l'itération suivante */				
					Ttilde=0; derTtildeDeltaL=0; derTtildeStilde=0;  T=0;	
				}
		/* FIN DE LA SIMULATION */		
				
				/* Calcul de la fonction objectif de phase et de la dérivée liée à la phase (pour la contrainte c'est fait lors de la simulation)*/
				Norme=auxNorme^(1./coefNorme);
				Nmoins=Norme-Tphase;
				Nmoins=min(Nmoins,0);
				Jphase=int2d(Sh)(Nmoins*Nmoins);
				derPhaseDeltaL=int2d(Sh)(2*Nmoins*((Norme)^(1-coefNorme))*auxDerPhaseDeltaL);
				derPhaseStilde=int2d(Sh)(2*Nmoins*((Norme)^(1-coefNorme))*auxDerPhaseStilde);				
				
				if(affichage==1){cout<<"      "<<"derPhaseDeltaL="<<derPhaseDeltaL<<"; derPhaseStilde="<<derPhaseStilde<<endl;}
				
				/* calcul du lagrangien et des deux dérivées totales */
				L=lphase*Jphase+Lag*(Contrainte-tolContrainte);
				derDeltaL=lphase*derPhaseDeltaL+Lag*derSupDeltaL;
				derStilde=lphase*derPhaseStilde+Lag*derSupStilde;
				
				if(affichage==1){
					cout<<"      "<<"L="<<L<<"; Lold="<<Lold<<endl;
					cout<<"      "<<"Jphase="<<Jphase<<"; Contrainte="<<Contrainte<<endl;
				}
				
				/* si ça ne fonctionne pas */
				if(L-Lold>=tolDescente){		
					/* on diminue le coefficient et donc le pas de descente */
					coefDeltaL=coefDeltaL*0.2;
					coefStilde=coefStilde*0.2;
					stepDeltaL=coefDeltaL/abs(derDeltaLold);
					stepStilde=coefStilde/abs(derStildeold);
					/* calcul des nouvelles variables (en utilisant les infos stockées)*/
					DeltaL=DeltaLold-stepDeltaL*derDeltaLold;
					DeltaL=min(DeltaL, DeltaLMax);
					DeltaL=max(DeltaL, DeltaLMin);
					stilde=stildeold-stepStilde*derStildeold;
					stilde=min(stilde, stildeMax);
					stilde=max(stilde, stildeMin);
					if(affichage==1){
						cout<<"     "<<"solution ratee"<<endl;
						cout<<"     "<<"prochain aLignes="<<DeltaL<<"; step="<<stepDeltaL<<endl;
						cout<<"     "<<"prochain stilde="<<stilde<<"; step="<<stepStilde<<endl;
					}	
					acc=0;										
				}
				
				/* si c'est réussi */
				if(L-Lold<=tolDescente){
					
					/* on update la variable qui fait qu'on ne part pas trop loin des variables précédentes*/
					/* (normalisation pour ne garder ensuite que le signe de la dérivée et gérer complètement de combien on descend) */
					stepDeltaL=coefDeltaL/abs(derDeltaL);
					stepStilde=coefStilde/abs(derStilde);
					
					/* mise à jour du multiplicateur de Lagrange et nouveau calcul du Lagrangien */
					if(Contrainte-tolContrainte<=0) {Lag=0;}
					else {Lag=Lag+LagStep*(Contrainte-tolContrainte);}
					L=lphase*Jphase+Lag*(Contrainte-tolContrainte);
					
//					acc=1;
	
					/* update des variables */				
					DeltaLold=DeltaL;
					DeltaL=DeltaL-stepDeltaL*derDeltaL;
					DeltaL=min(DeltaL, DeltaLMax);
					DeltaL=max(DeltaL, DeltaLMin);
					stildeold=stilde;
					stilde=stilde-stepStilde*derStilde;
					stilde=min(stilde, stildeMax);
					stilde=max(stilde, stildeMin);
					
					if(affichage==1){
						cout<<"     "<<"reussi"<<endl;
						cout<<"     "<<"prochain aLignes="<<DeltaL<<"; stepDeltaL="<<stepDeltaL<<"; LprimeAlpha="<<derDeltaL<<endl;
						cout<<"     "<<"prochain stilde="<<stilde<<"; stepStilde="<<stepStilde<<"; LprimeStilde="<<derStilde<<endl;
						cout<<"     "<<"Lag="<<Lag<<endl;
					}
					
					/* mise en stock des variables et update du coefficient */
					Lold=L;
					Jphaseold=Jphase;
					Contrainteold=Contrainte;
					coefDeltaL=coefDeltaL*1.5;
					coefStilde=coefStilde*1.5;	
					derDeltaLold=derDeltaL;
					derStildeold=derStilde;								
			}
			
			if(affichage==1){
				cout<<endl;
				cout<<endl;
				cout<<endl;
				cout<<endl;
			}		

			
			{svol = "valeurs.data";
				ofstream f(svol,append);
				f<<itB<<" "<<acc<<" "<<Lold<<" "<<Jphaseold<<" "<<Contrainteold<<" "<<DeltaL<<" "<<stilde<<" "<<Lag<<endl;}
		}
		
exec("python /Users/mathilde/These/Projets/CodesPython/pltVariables.py -nomVar iteration acceptation Lagrangien Jphase Contrainte DeltaL stilde Lag -nomVarNonOkIt0 Lagrangien Jphase Contrainte -fichier valeurs.data");
			