string pathAdvect ="/Users/mathilde/bin/advect";
string pathStockage="/Users/mathilde/These/Projets/FormeSection/SectionCercle/CercleGlobal/3D/ContrainteSeule/ResultatsTests";

string path=pathStockage+"/ini2";
		exec("mkdir "+path);
		exec("cp contSeule.edp "+path+"/contSeule.edp");
		

/* Maillage */
int n=20; int nbCouches=25; real dh=0.1;
real xM0=0.; real xM1=1.; real yM0=0; real yM1=1.; real zM0=0.;


/* Initialisation choisie */
int ini=2; // 1:ellipse; 2:trous; 3:lectureSol
		real pAxe,gAxe,centreX,centreY; 
	pAxe=0.1; gAxe=0.5; centreX=0.5; centreY=0.5;
	int kx=4, ky=4, kz=4;
	string nomFichier="/Users/mathilde/Desktop/These/Projets/SectionCercle/AvecElasticite/Code3D/180219/Stockage/LVol10LCompl1LCercle5Ini2/041LvlSet.sol";



real coefAlpha=1.;
real eps1=0.0001; // pour la densite, materiau mou

int NB=15;
real coef=10; real coefini=10;

func real toleranceF (int it){
	real tol=0.05;
	if(tol!=0){
		if ( it == 50 ) tol = 0.01;
		if ( it == 100 ) tol = 0.005;
		if ( it == 150 ) tol = 0.001;	
		if ( it == 200 ) tol = 0.00;
	}
	return(tol);	
}	
	
	
	
/* -------------------------------------------------------------------------------------------------------- */
load "msh3"
load "tetgen"
load "medit" //pour freefem
load "iovtk" //pour paraview
load "distance"

int[int] fforder=[1];

	/* -------------------------- fonctions annexes -------------------------- */

	/* MAILLAGE */
		macro maillageCercles3D(n,Th,xM0,xM1,yM0,yM1,zM0,dh,nbCouches){	
				mesh Thsq=square(n,n,[xM0+(xM1-xM0)*x, yM0+(yM1-yM0)*y]);
				for (int itMaillage=0; itMaillage<nbCouches; itMaillage=itMaillage+1){
					Thaux1=buildlayers(Thsq, 1, zbound=[zM0+dh*itMaillage,zM0+dh*(itMaillage+1)]);
					Thaux2 = tetg(Thaux1,switch="paAAQY");
					Th=Th+Thaux2;
				}
				
				func  newlabel = ( z < 100 ) ? 0 : label;
				Th = change(Th,flabel=newlabel);
				
				func  newlabel2 = (x < 1e-3) ? 2 : label;
				func newlabel21 = (x > 0.999) ? 3 : label;
				func newlabel22 = (y < 1e-3) ? 4 : label;
				func newlabel23 = (y > 0.999) ? 5 : label;
				
				Th = change(Th,flabel=newlabel2);
				Th = change(Th,flabel=newlabel21);
				Th = change(Th,flabel=newlabel22);
				Th = change(Th,flabel=newlabel23);
				
				for (int itLab=0; itLab<=nbCouches; ++itLab){
					real lab, bas, haut;
					bas=itLab*dh-0.0001;
					haut=itLab*dh+0.0001;
					func newlabel3 = ((bas<z) && (haut>z)) ? itLab+6 : label;
					Th = change(Th,flabel=newlabel3);
				}
				
				real zMax=zM0+nbCouches*dh-1e-3;
				real xMilieu=(xM0+xM1)/2.;
				real yMilieu=(yM0+yM1)/2.;
				func newlabelHaut = ((z>zMax) && (x<xMilieu+0.05) && (x>xMilieu-0.05) && (y<yMilieu+0.05) && (y>yMilieu-0.05))? nbCouches+7 : label;
				
				Th = change(Th,flabel=newlabelHaut);
		}//EOM

	/* INITIALISATIONS */
			func real ellipse(real gAxe, real pAxe, real centrex, real centrey){
				real a;
				a=((x-centrex)/gAxe)^2.+((y-centrey)/pAxe)^2.-1;
				return(a);
			}
			
				
				
			func real initialisationSymCantilever (int kx, int ky, int kz, real xfunc0, real xfunc1, real yfunc0, real yfunc1, real zfunc0, real zfunc1){
				real a;	
				a=-0.1-cos(kx*pi*(x-xfunc0)/(xfunc1-xfunc0))*cos(ky*pi*(y-yfunc0+0.5)/(yfunc1-yfunc0))*cos(kz*pi*(z-zfunc0)/(zfunc1-zfunc0));
				return(a);
			}
	

		
		/* -------------------------- début du calcul -------------------------- */
		

			/* ----- MAILLAGE ----- */
				mesh3 Th, Thaux1, Thaux2;
				maillageCercles3D(n,Th,xM0,xM1,yM0,yM1,zM0,dh,nbCouches);	
				savemesh(Th,"templvs.mesh");
				exec("cat templvs.mesh | sed 's/MeshVersionFormatted 2/MeshVersionFormatted 0/' > toto.mesh");
				exec("mv toto.mesh templvs.mesh"); 		
				
				fespace Vh0(Th,P0); fespace Vh1(Th,P1); fespace Vh2(Th,P2);
				fespace Vh02(Th,[P0,P0,P0]); fespace Vh12(Th,[P1,P1,P1]);
				Vh1 aux1; Vh0 aux0; Vh12 [aux12x, aux12y, aux12z]; Vh02 [aux02x, aux02y, aux02z];		
		
				/* A propos du maillage */		
				Vh0 meshSizes=hTriangle;		
				real meshsiz=meshSizes[].max; //maximal length of edges
				int np=Th.nv; int nt=Th.nt;
				real alpha=meshsiz;
				
				/* Preparation de la lecture des fichiers... */
				real[int] loadsol(np);
				string s;
		
			
			/* ----- INITIALISATION ----- */
				Vh1 distVraie,distVraieTest,auxDist,redist;
				real zM1=zM0+nbCouches*dh;
				if(ini==1) distVraie=ellipse(gAxe, pAxe, centreX,centreY);
				if(ini==2) distVraie=initialisationSymCantilever (kx,ky,kz,xM0,xM1,yM0,yM1,zM0,zM1);
				if(ini==3) {
					{ifstream f(nomFichier);
					 for(int i=0; i<8; i++) {
					    f>>s;
					  }
					  for(int i=0; i<np; i++) {
					    f>>loadsol[i];
					  }
					  distVraieTest[] = loadsol;}
				}
		
	
				distVraieTest=distVraie;
				func distaux = (distVraieTest(x,y,z)<=0)*0+(distVraieTest(x,y,z)>0)*distVraieTest(x,y,z);
				problem zeroOnMeshB(auxDist,aux1)= int3d(Th)(auxDist*aux1)-int3d(Th)(distVraieTest*aux1)+on(2,auxDist=distaux)+on(3,auxDist=distaux)+on(4,auxDist=distaux)+on(5,auxDist=distaux);
				zeroOnMeshB;
				distVraieTest=auxDist+0.0001;
				distance(Th,distVraieTest,redist[], distmax=10);
				distVraieTest[]=redist[];
				distVraie=distVraieTest;


			/* ----- CALCULS VALEURS INITIALES ----- */
		
				/* densité */
					Vh1 X;
					X=eps1+(1-eps1)*(distVraie<0);
		
				/* Normale et H liées à la forme */
					Vh1 nx, ny, nz, norme; Vh12 [nx1, ny1, nz1],[zx,zy,zz];
					Vh0 H, nabla; Vh02 [nx0,ny0,nz0];
					
					varf reconsN([zx,zy,zz],[aux12x,aux12y, aux12z]) = int3d(Th)(zx*aux12x+zy*aux12y+zz*aux12z);
					matrix Anormal=reconsN(Vh12,Vh12);		
					varf reconsNrhs([zx,zy,zz],[aux12x,aux12y, aux12z]) = int3d(Th)(nx0*aux12x+ny0*aux12y+nz0*aux12z);
					
					nabla=(dx(distVraie))^2+(dy(distVraie))^2+(dz(distVraie))^2;
					[nx0,ny0,nz0]=[dx(distVraie)/(sqrt(nabla+eps1^2)),dy(distVraie)/(sqrt(nabla+eps1^2)),dz(distVraie)/(sqrt(nabla+eps1^2))];
					real[int] bNormal=reconsNrhs(0,Vh12);	
					zx[]=Anormal^-1*bNormal;		 
					norme = sqrt(zx^2+zy^2+zz^2+eps1^2);
					nx=zx/norme; ny=zy/norme; nz=zz/norme;						
					H=dx(nx)+dy(ny)+dz(nz);
			
				
				/* Cercles */
					
					/* Contrainte, grh */
						real contCercle, contCercleTest;
				
						real hauteur, intDirac, Aire, Cx, Cy, A1, A2, A3;	
						Vh1 Dirac, Dx, Dy, DE, dist, dist2;
						Vh0 grhHauteur, grhCercle;
					
						macro computeGrhCercleAux(Th, distVraie, X, nx, ny, nz, H, itNb, dh){	
							Dirac=0; 
							Aire=0; Cx=0; Cy=0;
							Dx=0; Dy=0; DE=0; dist=0; dist2=0;
							A1=0; A2=0; A3=0; grhHauteur=0;
											
							intDirac=int3d(Th)(exp(-100*(z-itNb*dh)^2.));
							Dirac=exp(-100*(z-itNb*dh)^2.)/intDirac;
							
							int corrLabel=itNb+6;
							Aire=int2d(Th,corrLabel)(X);
							Cx=int2d(Th, corrLabel)(X*x);
							Cy=int2d(Th, corrLabel)(X*y);
							
							Dx=x-Cx/(Aire+eps1);
							Dy=y-Cy/(Aire+eps1);
							DE=sqrt(Dx^2.+Dy^2.);
							dist=DE-sqrt(Aire/pi);
							dist2=dist*dist;
							
							
							A1=int2d(Th, corrLabel, levelset=distVraie)(2*dist*Dx/(Aire*DE+eps1));
							A2=int2d(Th, corrLabel, levelset=distVraie)(2*dist*Dy/(Aire*DE+eps1));
							A3=int2d(Th, corrLabel, levelset=distVraie)(dist/(sqrt(Aire*pi)+eps1));
							
							grhHauteur=dz(Dirac)*nz*dist2+Dirac*(2*dist*(dx(dist)*nx+dy(dist)*ny+dz(dist)*nz)+H*dist2-A3-A1*Dx-A2*Dy);
						}//EOM
			
					/* contrainte appliquée partout sauf sur face du haut */	
					for (int it=0; it<nbCouches; it=it+1){
						computeGrhCercleAux(Th, distVraie, X, nx, ny, nz, H, it, dh);
						grhCercle=grhCercle+grhHauteur;
						contCercle=contCercle+dh*int2d(Th, it+2, levelset=distVraie)(dist2);	
					}
			
				/* Vitesse d'advection */
					Vh1 vhCercle, bvelCercle, vhTest, vh;
					
					varf calVelBilCercle(vhCercle,aux1)=int3d(Th)( (coefAlpha*alpha)^2.*( dx(vhCercle)*dx(aux1)+dy(vhCercle)*dy(aux1)+dz(vhCercle)*dz(aux1) ) + vhCercle*aux1)												 + on(nbCouches+7, vhCercle=0);
					
					matrix AvelCercle=calVelBilCercle(Vh1,Vh1);
					varf calVelLinCercle(unused,aux1)=int2d(Th,levelset=distVraieTest)(dh*grhCercle*aux1);
		
					bvelCercle[]=calVelLinCercle(0,Vh1);
					vhCercle[]=AvelCercle^-1*bvelCercle[];
					vhCercle=-vhCercle;
					vh=vhCercle;
					[nx1, ny1, nz1]=[vh*nx, vh*ny, vh*nz];
					
				/* Affichage */
				cout<<endl;
				cout<<endl;
				cout<<"contCercle="<<contCercle<<endl;
				cout<<"fin de l'initialisation, debut de la boucle"<<endl;
				cout<<endl;
				cout<<endl;



			/* ----- BOUCLE ----- */

				int acc=1; int itB=0; 
				real step, maxV;
				real tolerance;
				
				string svol;
				{svol = path+"/valeurs.data";
					 ofstream f(svol);
					 f<<itB<<" "<<acc<<" "<<contCercle<<" "<<coef<<endl;}
	

	
				for (itB=1;itB< NB;itB=itB+1){
					cout<<"iteration "<<itB<<endl;
					
					tolerance=toleranceF(itB);
		
					distVraieTest=distVraie;
					contCercleTest=0;
					vhTest=0;
				
					maxV = max(vh[].max,-vh[].min);
					step=coef*meshsiz/(maxV+eps1);
		
					savesol("templvs.chi.sol",Th,distVraieTest);
					savesol("templvs.sol",Th,[nx1,ny1,nz1]);
					cout<<"advection"<<endl;
					exec(pathAdvect+" templvs.mesh -dt " + step + " -s templvs.sol -c templvs.chi.sol -o templvs.chi.sol >> so.res ");
					cout<<"fin advection"<<endl;
		
					{ifstream f("templvs.chi.sol");
					 for(int i=0; i<8; i++) {
					    f>>s;
					  }
					  for(int i=0; i<np; i++) {
					    f>>loadsol[i];
					  }
					  distVraieTest[] = loadsol;}
		  
					func distaux = (distVraieTest(x,y,z)<=0)*0+(distVraieTest(x,y,z)>0)*distVraieTest(x,y,z);	
					zeroOnMeshB;
					distVraieTest=auxDist+0.0001;
					distance(Th,distVraieTest,redist[], distmax=10);
					distVraieTest[]=redist[];
				
					X=eps1+(1-eps1)*(distVraieTest<0);
		
					nabla=(dx(distVraieTest))^2+(dy(distVraieTest))^2+(dz(distVraieTest))^2;
					[nx0,ny0,nz0]=[dx(distVraieTest)/(sqrt(nabla+eps1^2)),dy(distVraieTest)/(sqrt(nabla+eps1^2)),dz(distVraieTest)/(sqrt(nabla+eps1^2))];
					
					real[int] bNormal=reconsNrhs(0,Vh12);	
					zx[]=Anormal^-1*bNormal;
									 
					norme = sqrt(zx^2+zy^2+zz^2+eps1^2);
					nx=zx/norme; ny=zy/norme; nz=zz/norme;						
					H=dx(nx)+dy(ny)+dz(nz);
		
					grhCercle=0;	
					for (int it=0; it<nbCouches; it=it+1){
						computeGrhCercleAux(Th, distVraieTest, X, nx, ny, nz, H, it, dh);
						grhCercle=grhCercle+grhHauteur;
						contCercleTest=contCercleTest+dh*int2d(Th, it+2, levelset=distVraieTest)(dist2);	
					}
		
					vhCercle=0;
					bvelCercle=0;
					bvelCercle[]=calVelLinCercle(0,Vh1);
					vhCercle[]=AvelCercle^-1*bvelCercle[];
					vhCercle=-vhCercle;
					vhTest=vhCercle;
			
					cout<<endl;
					cout<<"iteration "<<itB<<"; contCercle="<<contCercle<<"; contCercleTest="<<contCercleTest<<endl;
					cout<<endl;
			
			
					if (contCercleTest-contCercle<=tolerance){
						cout<<"iteration accepted"<<endl;
						acc=1;
						distVraie=distVraieTest;
						contCercle=contCercleTest;
						vh=vhTest;
						[nx1, ny1, nz1]=[vh*nx, vh*ny, vh*nz];
										
						if (step<0.05) coef=min(coef*1.5,coefini);
					}
					else{
						cout<<"iteration refused"<<endl;
						acc=0;
						
						coef=coef/2.;
					}
					//if(itB%10==1){			
						if(itB<10){
							savesol(path+"/00"+itB+"LvlSet.sol",Th,distVraie);
							savevtk(path+"/it00"+itB+".vtk", Th, distVraie, dataname="distVraie", order=fforder);
						}
						if(itB>9 && itB<100){
							savesol(path+"/0"+itB+"LvlSet.sol",Th,distVraie);
							savevtk(path+"/it0"+itB+".vtk", Th, distVraie, dataname="distVraie",order=fforder);
						}
						if(itB>99){
							savesol(path+"/"+itB+"LvlSet.sol",Th,distVraie);
							savevtk(path+"/it"+itB+".vtk", Th, distVraie, dataname="distVraie", order=fforder);
						}
					//}
			
					{svol = path+"/valeurs.data";
						 ofstream f(svol,append);
						 f<<itB<<" "<<acc<<" "<<contCercle<<" "<<coef<<endl;}
				
			} 	
			
			
			exec("python /Users/mathilde/These/Projets/CodesPython/pltvariables.py -nomVar iteration acc contrainte coef -fichier "+path+"/valeurs.data -stockage "+path);
	
	
	exec("rm so.res");
	exec("rm templvs.chi.sol");
	exec("rm templvs.mesh");
	exec("rm templvs.mesh.gmsh");
	exec("rm templvs.sol");