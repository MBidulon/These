load "medit" //pour freefem
load "distance"
load "iovtk"
include "/Users/mathilde/These/Projets/FormeSection/SectionCercle/CodesUtiles/2D/initialisations.edp"

string pathAdvect="/Users/mathilde/bin/advect";
string pathMshdist="/Users/mathilde/bin/mshdist";
string pathStockage="/Users/mathilde/These/Projets/FormeSection/SectionCercle/CercleCompConnexe/2D/ContrainteVolume/SansPousserBord/ResultatsTests";

verbosity=0;
int debugPlot=1;
int debug=1;
real eps1=0.0000001;
real coefAlpha=1.;


int compChoix=0; //0 : composantes solides, 1 : composantes vides


real lVol=0;
real stepLagVol=10.;
real tolVol=0.1;

/* choix optimisation */
int NB=10;
real coef,coefini;
coef=coefini=50.;

	string path=pathStockage+"/Ellipse";
	exec("mkdir "+path);
	exec("cp code2dContVol.edp "+path+"/code2dContVol.edp");
	real[int] visoV=[-50,-0.0001,0.0001,50]; 
	real[int] visoV2=[-50,-0.0001,0.0001,50];


/* ----- MAILLAGE ----- */

int n=100;	
real xM0=0.; real xM1=1.; real yM0=0; real yM1=1.;
int numLabel=2;
	
		int[int] lab=[numLabel,numLabel,numLabel,numLabel];
		mesh Th=square(n,n,[xM0+(xM1-xM0)*x, yM0+(yM1-yM0)*y], label=lab);
		savemesh(Th,"templvs.mesh");	
		exec("cat templvs.mesh | sed 's/MeshVersionFormatted 0/MeshVersionFormatted 1/' > toto.mesh");
		exec("mv toto.mesh templvs.mesh"); 
		fespace Vh0(Th,P0); fespace Vh02(Th,[P0,P0]);
		fespace Vh1(Th,P1); fespace Vh12(Th,[P1,P1]);
		Vh1 aux1; Vh0 aux0; Vh12 [aux12x, aux12y]; Vh02 [aux02x, aux02y];
	
		/* A propos du maillage */		
		Vh0 meshSizes=hTriangle;		
		real meshsiz=meshSizes[].max; //maximal length of edges
		int np=Th.nv; int nt=Th.nt;
		real alpha=meshsiz;
		
/* ----- INITIALISATION ----- */
		Vh1 distVraie, distVraieTest, auxDist, redist;
		Vh1 cercleAp, Diff;
		real[int] loadsol(np);
		string s;
		
//	distVraie=toutPlein();
//	distVraie=toutVide();
//	distVraie=moitiePlein();
//	distVraie=plein1trouEll(0.4,0.2,0.5,0.5);
	distVraie=vide1PleinEll(0.3,0.2,0.5,0.5);
//	distVraie=moitiePlein1trouMoitieVideEll();
//	distVraie=-moitiePlein1trouMoitieVideEll();
//	distVraie=deuxPleins1Vide();
//	distVraie=deuxPleinsTroisVides();
//	distVraie=deuxVidesTroisPleins();
//	distVraie=initialisationSymBridge (2,2);
//	distVraie=initialisationSymBridge (3,4);

		distVraieTest=distVraie;
		func distaux = (distVraieTest(x,y)<=0)*0+(distVraieTest(x,y)>0)*distVraieTest(x,y);
		problem zeroOnMeshB(auxDist,aux1)= int2d(Th)(auxDist*aux1)-int2d(Th)(distVraieTest*aux1)+on(2,auxDist=distaux);
		zeroOnMeshB;
		distVraieTest=auxDist+0.0001;
		distance(Th,distVraieTest,redist[], distmax=10);
		distVraieTest[]=redist[];
		distVraie=distVraieTest;
	
		if(debugPlot==1){plot(distVraie, fill=1, value=1, viso=visoV, WindowIndex=1, wait=1, cmm="distVraie initialisation");}
	
	
	
	/* Densite */
		Vh1 X=eps1+(1-eps1)*(distVraie<0);
	
	/* Volume */
		real volCont, vol, vCible;
		Vh1 vhVol, vhVolTest, bvelVol;;
		
		vCible=int2d(Th)(X);
		vol=int2d(Th)(X);
		volCont=(vol-vCible)^2-tolVol;
		
		varf calVelBilVol(vhVol,aux1)=int2d(Th)((coefAlpha*alpha)^2.*( dx(vhVol)*dx(aux1)+dy(vhVol)*dy(aux1))+ vhVol*aux1);
		matrix AvelVol=calVelBilVol(Vh1,Vh1);
		varf calVelLinVol(unused,aux1)=int1d(Th,levelset=distVraieTest)(2*(vol-vCible)*aux1);
		
		bvelVol[]=calVelLinVol(0,Vh1);
		vhVol[]=AvelVol^-1*bvelVol[];		
		vhVol=-vhVol;
		
	/* Normale, vitesse, H : preparation du calcul*/
		Vh1 nx, ny, norme; Vh12 [zx,zy], [nx1, ny1];
		Vh0 H, nabla; Vh02 [nx0,ny0];
			
		varf reconsN([zx,zy],[aux12x,aux12y]) = int2d(Th)(zx*aux12x+zy*aux12y);
		matrix Anormal=reconsN(Vh12,Vh12);		
		varf reconsNrhs([zx,zy],[aux12x,aux12y]) = int2d(Th)(nx0*aux12x+ny0*aux12y);
	
	/* Normale calcul */		
		nabla=(dx(distVraie))^2+(dy(distVraie))^2;
		[nx0,ny0]=[dx(distVraie)/(sqrt(nabla+eps1^2)),dy(distVraie)/(sqrt(nabla+eps1^2))];
		
		real[int] bNormal=reconsNrhs(0,Vh12);	
		zx[]=Anormal^-1*bNormal;					 
		norme = sqrt(zx^2+zy^2+eps1^2);
		nx=zx/norme; ny=zy/norme;						
		H=dx(nx)+dy(ny);
	

	/* Contrainte Cercle */
		Vh1 vhCercle,vhCercleTest, C, vhC;	
		Vh0 grhC;
		real contrainte,contrainteC, contrainteTest;	
	
		Vh1 bvelCercle;
		varf calVelBilCercle(vhC,aux1)=int2d(Th)((coefAlpha*alpha)^2.*( dx(vhC)*dx(aux1)+dy(vhC)*dy(aux1))+ vhC*aux1);
		matrix AvelCercle=calVelBilCercle(Vh1,Vh1);
		varf calVelLinCercle(unused,aux1)=int1d(Th,levelset=C)(grhC*aux1);

		macro computeVhCercleAux(Th, C,nx,ny,H, vhC, grhC, contrainteC){
			contrainteC=0; vhC=0; grhC=0;
			real Aire,Cx,Cy,A1,A2,A3;
			Vh1 Dx,Dy,DE,dist,dist2;
			Aire=0; Cx=0; Cy=0; 
			Dx=0; Dy=0; DE=0; dist=0; dist2=0;
			A1=0; A2=0; A3=0;
			
			Vh1 Xcompi=eps1+(1-eps1)*(C<0);
				
			Aire=int2d(Th)(Xcompi);	
			Cx=int2d(Th)(x*Xcompi);
			Cy=int2d(Th)(y*Xcompi);
				
			Dx=x-Cx/(Aire+eps1);
			Dy=y-Cy/(Aire+eps1);
			DE=sqrt(Dx^2.+Dy^2.);
			dist=DE-sqrt(Aire/pi);
			dist2=dist*dist;
				
			A1=int1d(Th,levelset=C)(2*dist*Dx/(Aire*DE+eps1));
			A2=int1d(Th,levelset=C)(2*dist*Dy/(Aire*DE+eps1));
			A3=int1d(Th,levelset=C)(dist/sqrt(Aire*pi+eps1));
				
			grhC=dx(dist2)*nx+dy(dist2)*ny+H*dist2-A1*Dx-A2*Dy-A3;
				
			bvelCercle[]=calVelLinCercle(0,Vh1);
			vhC[]=AvelCercle^-1*bvelCercle[];		
			vhC=-vhC;
			
			contrainteC=int1d(Th,levelset=C)(dist2);
		}//EOM
	
	
		macro compConnexes(Th,distVraie,nx,ny,H,vhCercle,contrainte){
			int nbCompInt, nbCompExt,nbCompConsiderees;
			contrainte=0; vhCercle=0;
			
			savemesh(Th, "maillage.mesh");
			savesol("ini.sol", Th, distVraie);
			exec("python /Users/mathilde/These/Projets/CodesPython/compCon.py -mesh maillage.mesh -lvlSet ini.sol");
			Th=readmesh("Resmaillage.mesh");
			savemesh(Th,"Resmaillage.mesh");
			exec("cat Resmaillage.mesh | sed 's/MeshVersionFormatted 0/MeshVersionFormatted 1/' > toto.mesh");
			exec("mv toto.mesh Resmaillage.mesh");
	
		
			{ifstream f("nbComp");
				f>>nbCompInt;
				f>>nbCompExt;}	
		
			if(debug==1){
				cout<<"nb comp int="<<nbCompInt<<endl;
				cout<<"nb comp ext="<<nbCompExt<<endl;	
				Vh0 reg=region;
				plot(reg, fill=1, value=1, WindowIndex=2);
			}
		
			if(compChoix==0){nbCompConsiderees=nbCompInt;}
			if(compChoix==1){nbCompConsiderees=nbCompExt;}
		
			
			for(int it=compChoix; it<2*nbCompConsiderees; it=it+2){
				{ofstream f("Resmaillage.mshdist");
					f<<endl;
					f<<"InteriorDomains"<<endl;
					f<<"1"<<endl;
					f<<endl;
					f<<endl;
					f<<string(it);}
			
				exec(pathMshdist+" Resmaillage.mesh -dom -ncpu 2");				
				{ifstream f("Resmaillage.sol");
					for(int i=0; i<8; i++) {
					 f>>s;
					}
					for(int i=0; i<np; i++) {
						f>>loadsol[i];
					}
				C[] = loadsol;}	
							
				if(debug==1){plot(C,fill=1,value=1,WindowIndex=it);}
				exec("rm ./Resmaillage.mshdist");
				
				computeVhCercleAux(Th, C,nx,ny,H, vhC, grhC,contrainteC);
				contrainte=contrainte+contrainteC;
				vhCercle=vhCercle+vhC;
			}
		}//EOM
	
	compConnexes(Th,distVraie,nx,ny,H,vhCercle,contrainte);
	
	Vh1 vh;
	real objF, objFTest;
	vh=vhCercle+lVol*vhVol;
	objF=contrainte+lVol*volCont;
	[nx1, ny1]=[vh*nx, vh*ny];
	plot(vh,fill=1,value=1,WindowIndex=4);
	
			
	
/* Boucle */	
	int acc=1; int itB=0;	
	string svol;
	real maxV, step;
	
	{svol = path+"/valeurs.data";
		ofstream f(svol);
		f<<itB<<" "<<acc<<" "<<contrainte<<" "<<volCont<<" "<<lVol<<" "<<coef<<endl;}

	
	for (itB=1;itB<= NB;itB=itB+1){
		cout<<endl;
		cout<<"iteration "<<itB<<endl;
		
		distVraieTest=distVraie;
		objFTest=0;
		
		maxV = max(vhCercle[].max,-vhCercle[].min);
		step=coef*meshsiz/(maxV+eps1);
		
		savesol("templvs.chi.sol",Th,distVraieTest);
		savesol("templvs.sol",Th,[nx1,ny1]);
		
		cout<<"advection"<<endl;
		exec(pathAdvect+" templvs.mesh -dt " + step + " -s templvs.sol -c templvs.chi.sol -o templvs.chi.sol >> so.res ");
		cout<<"fin advection"<<endl;
		
		{ifstream f("templvs.chi.sol");
			for(int i=0; i<8; i++) {
				f>>s;
			}
			for(int i=0; i<np; i++) {
				f>>loadsol[i];
			}
			distVraieTest[] = loadsol;}
		func distaux = (distVraieTest(x,y)<=0)*0+(distVraieTest(x,y)>0)*distVraieTest(x,y);
		zeroOnMeshB;
		distVraieTest=auxDist+0.0001;
		distance(Th,distVraieTest,redist[], distmax=10);
		distVraieTest[]=redist[];
		
	
		X=eps1+(1-eps1)*(distVraieTest<0);
		
		vol=int2d(Th)(X);
		volCont=(vol-vCible)^2.-tolVol;		
		
		bvelVol[]=calVelLinVol(0,Vh1);
		vhVol[]=AvelVol^-1*bvelVol[];		
		vhVol=-vhVol;
		
		nabla=(dx(distVraieTest))^2+(dy(distVraieTest))^2;
		[nx0,ny0]=[dx(distVraieTest)/(sqrt(nabla+eps1^2)),dy(distVraieTest)/(sqrt(nabla+eps1^2))];	
		real[int] bNormal=reconsNrhs(0,Vh12);	
		zx[]=Anormal^-1*bNormal;					 
		norme = sqrt(zx^2+zy^2+eps1^2);
		nx=zx/norme; ny=zy/norme;						
		H=dx(nx)+dy(ny);
		
		compConnexes(Th,distVraieTest,nx,ny,H,vhCercle,contrainte);
		
		objFTest=contrainte+lVol*volCont;
	
		cout<<"iteration "<<itB<<"; contrainte="<<contrainte<<endl;
		cout<<"             "<<"; volCont="<<volCont<<endl;
		
		if (objFTest<=objF){
				cout<<"iteration accepted"<<endl;
				acc=1;
				distVraie=distVraieTest;
				
				if(volCont<=0){lVol=0;}
				if(volCont>0){lVol=lVol+stepLagVol*volCont;}
				
				objF=contrainte+lVol*volCont;
				vh=vhCercle+lVol*vhVol;
				[nx1, ny1]=[vh*nx, vh*ny];
									
				if (step<0.05) coef=min(coef*1.5,coefini);
		}
	
		else{
			cout<<"iteration refused"<<endl;
			acc=0;
			
			coef=coef/2.;
		}

		plot(distVraie, viso=visoV, fill=1, value=1, cmm="distVraie, it "+itB);
		plot(vh, viso=visoV, WindowIndex=2);
			
			if(itB<10){
				savesol(path+"/phi00"+itB+".sol",Th,distVraie);
			}
			if(itB>9 && itB<100){
				savesol(path+"/phi0"+itB+".sol",Th,distVraie);
			}
			if(itB>99){
				savesol(path+"/phi"+itB+".sol",Th,distVraie);
			}
			
			{svol = path+"/valeurs.data";
			ofstream f(svol,append);
			f<<itB<<" "<<acc<<" "<<contrainte<<" "<<volCont<<" "<<lVol<<" "<<coef<<endl;}
				
	} 		

	exec("python /Users/mathilde/These/Projets/CodesPython/pltvariables.py -nomVar iteration acc contrainte volCont lVol coef -fichier "+path+"/valeurs.data -stockage "+path);

			
	exec("rm so.res");
	exec("rm templvs.chi.sol");
	exec("rm templvs.mesh");
	exec("rm templvs.mesh.gmsh");
	exec("rm templvs.sol");		
	exec("rm maillage.mesh");
	exec("rm maillage.mesh.gmsh");	
	exec("rm Resmaillage.mesh");
	exec("rm Resmaillage.sol");
	exec("rm Resmaillage.mesh.gmsh");
	exec("rm ini.sol");
	exec("rm nbComp");
		
			